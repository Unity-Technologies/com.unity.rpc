using System;
using System.IO;
using Microsoft.Extensions.Hosting;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace Unity.Rpc.Hosted
{
    public class RpcHost<THost, TService> : HostBuilder
        where THost : Rpc<THost>
        where TService : class, IHostedService
    {
        private IHost host;
        private bool started = false;

        private IRegistration globalRegistration;
        private IRequestContext globalContext;

        public IServiceProvider ServiceProvider => host.Services;
        public IHostApplicationLifetime ApplicationLifetime => ServiceProvider.GetRequiredService<IHostApplicationLifetime>();

        public THost Rpc { get; set; }
        public TService Host { get; set; }

        public event Action<IServiceProvider> OnStart;
        public event Action<IServiceProvider> OnStop;
        public event Action<IServiceProvider> OnReady;

        private event Action<IRegistration, IRequestContext> RegisterOnStart;

        public RpcHost()
        {
            this
                .UseContentRoot(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location))
                .ConfigureServices((_, s) => {
                    s.AddSingleton<IHostedService, TService>(__ => Host);
                    s.AddSingleton(__ => Host);
                    s.AddSingleton(__ => globalRegistration);
                    s.AddSingleton(__ => globalContext);
                    s.AddSingleton(__ => Rpc.Configuration);
                });
        }

        protected THost RegisterRpc(THost ipc)
        {
            Rpc = ipc;
            Rpc.OnReady += RaiseOnReady;
            Rpc.OnStart += RaiseOnStart;
            Rpc.OnStop += RaiseOnStop;
            return Rpc;
        }

        /// <summary>
        /// Register an interface as a remote proxy that will be dynamically generated by the rpc as a singleton
        /// infrastructure
        /// </summary>
        /// <typeparam name="TProxy"></typeparam>
        /// <returns></returns>
        public virtual TService AddRemoteProxy<TProxy>()
            where TProxy : class
        {
            ConfigureServices((_, collection) => collection.AddSingleton(__ => {
                var target = Rpc.GetRemoteTarget<TProxy>();
                if (target == null)
                    target = Rpc.GenerateAndAddProxy<TProxy>();
                return target;
            }));

            Rpc.RegisterRemoteTarget<TProxy>();

            return Host;
        }

        /// <summary>
        /// Register a singleton class as a remote proxy that's been pregenerated.
        /// </summary>
        /// <typeparam name="TProxy"></typeparam>
        /// <returns></returns>
        public virtual TService AddGeneratedProxy<TProxy>()
            where TProxy : class
        {
            ConfigureServices((_, collection) => collection.AddSingleton<TProxy>());
            RegisterOnStart += (registration, context) => registration.RegisterRemoteTarget(ServiceProvider.GetService(typeof(TProxy)));
            return Host;
        }

        /// <summary>
        /// Register a singleton class as a remote proxy, with a factory that knows how to instantiate the instance
        /// </summary>
        /// <typeparam name="TProxy"></typeparam>
        /// <param name="factory"></param>
        /// <returns></returns>
        public virtual TService AddGeneratedProxy<TProxy>(Func<IServiceProvider, TProxy> factory)
            where TProxy : class
        {
            ConfigureServices((_, collection) => collection.AddSingleton(factory));
            RegisterOnStart += (registration, context) => registration.RegisterRemoteTarget(ServiceProvider.GetService(typeof(TProxy)));
            return Host;
        }

        /// <summary>
        /// Register a singleton class as a local rpc target that can receive ipc calls
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public virtual TService AddLocalTarget<T>()
            where T : class
        {
            ConfigureServices((_, collection) => collection.AddSingleton<T>());
            RegisterOnStart += (registration, context) => registration.RegisterLocalTarget(ServiceProvider.GetService(typeof(T)));
            return Host;
        }


        /// <summary>
        /// Register a singleton class as a local rpc target that can receive ipc calls, with a factory that knows how to instantiate it
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public virtual TService AddLocalTarget<T>(Func<IServiceProvider, T> factory)
            where T : class
        {
            ConfigureServices((_, collection) => collection.AddSingleton(factory));
            RegisterOnStart += ((registration, context) => registration.RegisterLocalTarget(ServiceProvider.GetService(typeof(T))));
            return Host;
        }

        public virtual async Task<TService> Start(CancellationToken token = default)
        {
            return await InternalStart(token);
        }

        private async Task<TService> InternalStart(CancellationToken token)
        {
            host = Build();
            await host.StartAsync(token);
            started = true;
            return Host;
        }

        public virtual Task Run(CancellationToken token = default)
        {
            return InternalRun(token);
        }

        public virtual Task Stop(int timeout = -1)
        {
            if (!started)
                return Task.CompletedTask;

            if (timeout >= 0)
                return host.StopAsync(TimeSpan.FromMilliseconds(timeout));
            return host.StopAsync();
        }

        public TService Starting(Action<IServiceProvider> onStart)
        {
            OnStart += onStart;
            return Host;
        }

        public TService Ready(Action<IServiceProvider> onReady)
        {
            OnReady += onReady;
            return Host;
        }

        public TService Stopping(Action<IServiceProvider> onStop)
        {
            OnStop += onStop;
            return Host;
        }

        protected void RaiseOnStart(IRegistration registration, IRequestContext context)
        {
            globalRegistration = registration;
            globalContext = context;

            RegisterOnStart?.Invoke(registration, context);
            RegisterOnStart = null;

            OnStart?.Invoke(ServiceProvider);
            OnStart = null;
        }

        protected void RaiseOnReady(IRequestContext context)
        {
            OnReady?.Invoke(ServiceProvider);
            OnReady = null;
        }

        protected void RaiseOnStop(Rpc ipc)
        {
            OnStop?.Invoke(ServiceProvider);
            OnStop = null;
        }

        private async Task InternalRun(CancellationToken token)
        {
            if (!started)
            {
                host = Build();
                await host.RunAsync(token);
            }
            else
            {
                using (host)
                    await host.WaitForShutdownAsync();
            }
        }
    }
}
